import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import graphviz

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit page
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß üå¥", layout="wide")

# Sidebar ‡πÄ‡∏°‡∏ô‡∏π
menu_choice = st.sidebar.selectbox("üåü ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π", ["‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à"])

# --- ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å ---
if menu_choice == "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å":
    st.markdown("""
        <h1 style='text-align: center; color: #FF6F61;'>üè† ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß</h1>
        <p style='text-align: center; font-size:18px; color:#555;'>‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≤‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö</p>
        """, unsafe_allow_html=True)

# --- ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à ---
elif menu_choice == "‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à":
    st.markdown("<h1 style='text-align: center; color: #FF6F61;'>üìù ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß</h1>", unsafe_allow_html=True)
    st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")

    st.sidebar.header("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")
    budget_choice = st.sidebar.radio(
        "1. ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", 
        ["‡∏ï‡πà‡∏≥ (<5000)", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (5000-15000)", "‡∏™‡∏π‡∏á (>15000)"], key="budget"
    )
    prefer = st.sidebar.radio(
        "2. ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô", 
        ["‡∏ó‡∏∞‡πÄ‡∏•", "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤", "‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°", "‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°", "‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥"], key="prefer"
    )

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏á‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    if budget_choice == "‡∏ï‡πà‡∏≥ (<5000)":
        budget = 5000
    elif budget_choice == "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (5000-15000)":
        budget = 12000
    else:
        budget = 20000

    # ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    destinations = [
        {"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î": "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": "‡πÄ‡∏Å‡∏≤‡∏∞‡∏•‡πâ‡∏≤‡∏ô", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏ó‡∏∞‡πÄ‡∏•", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô": 1500},
        {"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î": "‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": "‡∏≠‡πà‡∏≤‡∏ß‡∏ô‡∏≤‡∏á", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏ó‡∏∞‡πÄ‡∏•", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô": 2500},
        {"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î": "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": "‡∏´‡∏≤‡∏î‡∏õ‡πà‡∏≤‡∏ï‡∏≠‡∏á", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏ó‡∏∞‡πÄ‡∏•", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô": 4000},
        {"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": "‡∏î‡∏≠‡∏¢‡∏≠‡∏¥‡∏ô‡∏ó‡∏ô‡∏ô‡∏ó‡πå", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏†‡∏π‡πÄ‡∏Ç‡∏≤", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô": 2000},
        {"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": "‡∏ñ‡∏ô‡∏ô‡∏ô‡∏¥‡∏°‡∏°‡∏≤‡∏ô", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô": 2500},
        {"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î": "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": "‡πÄ‡∏Ç‡∏≤‡πÉ‡∏´‡∏ç‡πà", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô": 1800},
        {"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î": "‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": "‡∏ß‡∏±‡∏î‡πÑ‡∏ä‡∏¢‡∏ß‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏≤‡∏°", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô": 1200},
        {"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î": "‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": "‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô": 1600},
        {"‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": "‡∏ñ‡∏ô‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏≤‡∏£", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": "‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°", "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô": 2000},
    ]

    # --- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á ---
    filtered_destinations = [d for d in destinations if d["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"] == prefer]
    location_options = [d["‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"] for d in filtered_destinations]
    selected_locations = st.sidebar.multiselect(
        "3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡πà‡∏á)", location_options
    )

    if st.sidebar.button("üéØ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"):
        if not selected_locations:
            st.warning("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏´‡πà‡∏á")
        else:
            # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            results = []
            for d in filtered_destinations:
                if d["‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"] in selected_locations:
                    max_days = budget // d["‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô"]
                    results.append({
                        "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î": d["‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"],
                        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà": d["‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"],
                        "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô": d["‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô"],
                        "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏î‡πâ (‡∏ß‡∏±‡∏ô)": max_days
                    })

            df_results = pd.DataFrame(results)

            # --- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ---
            selected_provinces = df_results["‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"].unique()
            extra_recommendations = [
                d for d in filtered_destinations
                if d["‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"] in selected_provinces and d["‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"] not in selected_locations
            ]
            df_extra = pd.DataFrame(extra_recommendations)

            col1, col2 = st.columns([2, 3])
            with col1:
                st.markdown("### üó∫Ô∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ")
                fig_table = go.Figure(data=[go.Table(
                    header=dict(values=list(df_results.columns),
                                fill_color='paleturquoise',
                                align='left'),
                    cells=dict(values=[df_results[col] for col in df_results.columns],
                               fill_color='lavender',
                               align='left'))
                ])
                st.plotly_chart(fig_table, use_container_width=True)

                if not df_extra.empty:
                    st.markdown("### üåü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô")
                    fig_extra = go.Figure(data=[go.Table(
                        header=dict(values=list(df_extra.keys()),
                                    fill_color='lightgreen',
                                    align='left'),
                        cells=dict(values=[df_extra[col] for col in df_extra.columns],
                                   fill_color='honeydew',
                                   align='left'))
                    ])
                    st.plotly_chart(fig_extra, use_container_width=True)

            with col2:
                st.markdown("### üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß")
                fig = px.bar(
                    df_results,
                    x="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
                    y="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏î‡πâ (‡∏ß‡∏±‡∏ô)",
                    color="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î",
                    text="‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏î‡πâ (‡∏ß‡∏±‡∏ô)",
                    color_discrete_sequence=px.colors.qualitative.Pastel
                )
                fig.update_layout(
                    plot_bgcolor="#FFF7F0",
                    paper_bgcolor="#FFF7F0",
                    title_font_color="#FF6F61"
                )
                st.plotly_chart(fig, use_container_width=True)

            # ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
            st.markdown("### üåê ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à")
            dot = graphviz.Digraph(format='png')
            dot.attr(bgcolor='#FFF7F0')
            dot.node("A", f"üí∞ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì\n({budget_choice})", style='filled', color='#FFCCCB')
            dot.node("B", f"üíñ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö\n({prefer})", style='filled', color='#FFD580')
            dot.node("C", f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å\n({', '.join(selected_locations)})", style='filled', color='#A0E7E5')
            dot.node("D", f"üèùÔ∏è ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {len(df_results)} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", style='filled', color='#B4F8C8')
            dot.edges(["AB", "BC", "CD"])
            st.graphviz_chart(dot)
